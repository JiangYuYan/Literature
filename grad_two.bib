% Encoding: UTF-8

@Book{Abgrall2016,
  author    = {Rémi Abgrall and Chi-Wang Shu},
  publisher = {Elsevier},
  title     = {Handbook of Numerical Methods for Hyperbolic Problems (Basic and Fundamental Issues)},
  year      = {2016},
  file      = {:Abgrall 2016《Handbook of Numerical Methods for Hyperbolic Problems (Basic and Fundamental Issues)》.pdf:PDF},
  url       = {https://www.sciencedirect.com/handbook/handbook-of-numerical-analysis/vol/17},
}

@Article{Luo2019,
  author    = {Dongmi Luo and Weizhang Huang and Jianxian Qiu},
  journal   = {Journal of Computational Physics},
  title     = {A quasi-Lagrangian moving mesh discontinuous Galerkin method for hyperbolic conservation laws},
  year      = {2019},
  month     = {nov},
  pages     = {544--578},
  volume    = {396},
  comment   = {本文提出了一种用动网格 DG 求解双曲守恒律方程的数值方法，结合了 DG 和动网格策略。求解非线性双曲守恒律方程时，即使初值连续也会产生不连续解，DG 方法适合求解此类方程。1973 年 Reed 和 Hill 首次提出 DG 方法用来研究中子转移问题，Cockburn 构建了用 DG 法求解非线性非定常问题的框架。DG 法可以很好地捕捉弱间断，对于强间断需要采用非线性限制器抑制数值振荡。限制器有基于斜率方法的如 minmod 限制器，还有基于加权基本无振荡（WENO）格式的限制器。近期对 RKDG 方法发展了一种简单的的 WENO 和 HWENO 限制器，其主要思想为在目标单元构建整个多项式，而非点值和力矩。

​	对于激波、爆破波等物理现象，全局统一的网格方法在二维和三维问题中需要极大的计算量。自适应网格可以解决此问题，提高数值近似精度，降低计算量。常用的有三种方法：h-方法、p-方法和r-方法。h-方法通过增加和移除旧网格点来生成新网格，p-方法根据计算结果误差修改各处阶数，r-方法也称为动网格法，通过重新定位网格点但保证总数和连接性不变。DG法网格边界的不连续性让网格自适应策略更加灵活，适合使用 hp-方法结合的策略。Li 和 Tang 用将就网格守恒插值到新网格的重构动网格方法求解了二维守恒方程。Machenzie 和 Nicola 用基于 MMPDE 策略的 DG 方法求解了Hamilton-Jacobi 方程。Uzunca, Karasözen, and Küçükseyhan 用移动网格对称内罚伽辽金（SIPG）方法求解了行波偏微分方程。

​	本文提出了一种动网格 DG 方法对双曲守恒方程进行数值求解，这种新提出的离散方法对网格非奇异性有理论保障。用基于均匀分布和队列条件的 MMPDE 动网格方法，应用矩阵值函数提供用来控制网格尺寸、形状和方向的信息。移动网格有限差分 WENO 法对网格光滑度十分敏感，与之相反，本文提出的移动网格 DG 方法对网格光滑度不敏感。准拉格朗日式的离散中，网格移动是连续的，物理量不需要从从旧网格插值到新网格。本文提出的自适应动网格方法与 CFD 中常用的任意拉格朗日-欧拉（ALE）方法紧密相关，都有准拉格朗日版本（在时间上网格连续移动）和区域重构版本（用不连续的方式，物理量从旧网格插值到新网格）。本文工作重心在 MMPDE 动网格方法的应用，对 ALE-DG 方法也进行了分析与介绍。其中用到了物理量的 Hessian 矩阵确定网格自适应方向。

	本文综述了经典有限体积法的发展历程，简介了在三角形和四边形网格上的应用，包括加入人工粘性的中心差分格式、迎风格式和 ENO 格式。Lax-Wendroff 定理（1960）表明 FVM 自动满足守恒，非常适合偏微分方程的守恒和散度形式。早在 1953 年，MacNeal 采用类似有限体积的方法在畸变网格上构造了有限差分格式，1962 年 Varga 关于迭代求解线性方程组的书中记录了 FVM。1961 年，Preissmann 提出了当时著名的 Preissmann box scheme，现在发展为 cell-vertex 格式。1959 年，Godunov 提出了cell-centred FVM，用胞元边界两侧的黎曼解来确定数值通量。常用的 FVM 格式有四种：cell-vertex, cell centre, cell edge, and vertex-centred boxes。},
  doi       = {10.1016/j.jcp.2019.06.061},
  file      = {:Luo 2019《A Quasi Lagrangian Moving Mesh Discontinuous Galerkin Method for Hyperbolic Conservation Laws》.pdf:PDF},
  publisher = {Elsevier {BV}},
}

@Article{Keshav2013,
  author  = {S. Keshav},
  title   = {How to Read a Paper},
  year    = {2013},
  comment = {Three-Pass  Reading

General idea(5-10min)

- Carefully read the title, abstract, introduction and concusions.
- Read the section and sub-section headings.
- Glance at the mathematical content and reference.

Gool: Category (类别：实验、分析、问题描述)，Context (相关文献、理论基础)，Correctness (假设合理性)，Contributions (创新点)，Clarity (好文or水文)

Grasp contents (1h)

- What：except proof , including figures，diagrams，graphs (axes properly labeled? error bars?)
- How：jot down the key points，make comments in the margins, note down terms that didn’t understand ,  mark relevant unread reference

Gool: summarize the main thrust of the paper, with supporting evidence

understand deeply (several hours)

- attention to detail
- identify and challenge every assumption
- how I would present a  particular idea
- jot down ideas for future work

Gool: reconstruct the entire structure, identify its strong and weak points.

Doing a literature survey

- find 3-5 recent highly-cited papers in the area by search keywords
- find shared citations and repeated author names
- where they've published recently ---- top conferences
- rencent high-quality related work
- 2-pass},
  file    = {:Keshav 2013《How to Read a Paper》.pdf:PDF},
}

@Misc{,
  author = {PVC},
  title  = {miniWiki},
  url    = {https://pvcstillingradschool.github.io/miniWiki/},
}

@InCollection{Gottlieb2016,
  author    = {S. Gottlieb and D.I. Ketcheson},
  booktitle = {Handbook of Numerical Analysis},
  publisher = {Elsevier},
  title     = {Time Discretization Techniques},
  year      = {2016},
  pages     = {549--583},
  comment   = {求解双曲偏微分方程（HPDE），通常先进行空间离散得到常微分方程（ODE），再对ODE进行时间离散推进。时间推进方法包括多步法（R-K）、多级法、高阶导数法（Tayler级数）以及综合方法。时间步长约束需要满足绝对稳定性要求和附加的问题固有物理特性条件（如非负、总变差稳定等）。尤其是问题中产生激波时需要满足这些物理条件。本文对求解HPDE的时间推进经典方法进行了综述，并介绍了当前常用的前沿方法。

对经典方法的计算特性进行了评估，多步法每步计算量小但所需存储量大，多级法每步计算量大但需存储量小，高阶导数缓和了存储量需求但计算量可能会更大。允许最大步长与三个因素有关：绝对稳定性（即线性稳定性，如CFL条件，对于光滑问题保证收敛）、鲁棒性（非线性稳定性，如密度压力为正和抑制振荡，对于激波和大梯度问题需保证物理、数学约束，通常在空间上使用限制器技术）、精度（不常用来限制步长）。

对经典的R-K法、多步法、多级多步法、泰勒级数法、多级高阶导数法进行简介并对前沿方法进行了综述。谱延迟校正（SDC）方法是一种自适应阶数的R-K法。强保稳定性（SSP）方法通过对经典方法的SSP系数进行优化得到SSP时间推进方法，但它可能不是时间步长的限制因素。可选择其他性能指标（如绝对稳定性、低存储空间、数值色散和耗散）或与SSP同时对时间推进方法的系数进行数值优化。半显式半隐式（IMEX）方法在刚性项采用隐式积分，在非刚性项采用显式积分。指数时间差分（ETD）方法已广泛应用在DG法中。

并行可增加},
  doi       = {10.1016/bs.hna.2016.08.001},
}

@InCollection{Toro2016,
  author    = {E.F. Toro},
  booktitle = {Handbook of Numerical Analysis},
  publisher = {Elsevier},
  title     = {The Riemann Problem},
  year      = {2016},
  pages     = {19--54},
  comment   = {1860年Bernhard Riemann提出了黎曼问题，1959年Godunov将其引入现代计算科学领域，给出了可压欧拉方程的精确解。精确解在实际应用中过于繁琐，但为研究和评估近似解法提供理论基础。常用的近似解法有Roe、HHL、HLLC和Osher-Solomon type求解器。有限体积法和DG有限元方法中的数值通量可用黎曼问题的解来定义，此外还可以用通量矢量分裂、中心多级通量（如MUSTA、Krylov和PVM格式）。讨论了判定现有黎曼求解器的准则。对经典黎曼问题的推广，如多维黎曼求解器，高阶或广义黎曼问题（GRP）进行简介。},
  doi       = {10.1016/bs.hna.2016.09.015},
}

@Article{Persson2005,
  author  = {Per-Olof Persson},
  title   = {Mesh Generation for Implicit Geometries},
  year    = {2005},
  comment = {​	网格生成技术十分重要，其中一个关键问题是如何表示几何形状。本文采用带符号距离函数表示，函数为负代表在区域内。详细阐述了如何对简单形状、复杂形状以及隐式距离函数表示的形状，计算各点到边界的距离。网格生成的迭代技术中， 我们将单纯形网格与桁架结构对比进行物理类比。网格点类比为桁架节点，三角形的边类比未杆，每次迭代过程中，对每个杆假设一个合适的力-位移函数，求解平衡方程。施加力能移动节点，而迭代过程中的Delaunay三角划分算法能调整拓扑结构，这两步为最重要的步骤。采用拉普拉斯光滑网格方法调整、加强网格质量，而不需要重新划分三角形网格。Bossen和Heckbert研究过这种基于力的网格生成方法。将距离函数的表示方式和基于力的节点位移结合起来效果很好，距离函数可以快速判断节点在区域内或外，同时可以用来寻找距离最近的点。本文的算法不仅简单，还拥有铰高的网格质量，生成的网格边长会接近于用户定义的相对尺寸h(x)。与传统的Delaunay算法相比，力平衡算法网格质量更高。

​	算法基于三角网格和桁架结构的力学类比。力-位移关系f(l, l0) 取决于当前长度 l 和未伸长长度l0。外力施加于边界点上，与其反作用力相平衡，保证节点不移出边界。以2维网格为例，节点位移记为N×2的矩阵，力向量函数 F(p)并非p的连续函数，因为随着点的移动，Delaunay三角划分会改变网格的拓扑结构（即相邻点的连接情况）。一种简单的求解平衡方程的方法是增加人工时间依赖性，求解常微分方程的稳态解，用前向欧拉法进行时间离散。在迭代过程中移动到边界外的点，需要移回与之最近的边界点，以保证力作用方向沿着边界法向。大部分杆上都是排斥力，这使得节点在整个几何域上展开。 用单元相对尺寸函数h(x,y)控制局部网格尺寸。

​	具体步骤如下：

1. 在范围矩形内僧成初始位置分布
2. 将几何域外的点移除
3. 进行Delaunay三角划分
4. 计算杆信息
5. 根据力-位移关系移动点
6. 将移动到边界外的点移回边界
7. 如果达到结束条件（总变化为小量）结束，否则回到第3步

​	网格质量控制指标q = 2rin/rout，根据经验q>0.5是结果比较好。与Delaunay修正算法作比较，本方法生成的网格由较好的网格质量和均匀性。

改进点：

- 迭代求解 -> 最小势能
- 边界条件 -> 拉格朗日乘子约束
- 并行生成},
  file    = {:Persson 2005《Mesh Generation for Implicit Geometries》.pdf:PDF},
}

@Book{Babinsky2011,
  author = {Holger Babinsky and John K. Harvey},
  title  = {Shock Wave Boundary Layer Interaction},
  year   = {2011},
  file   = {:Babinsky 2011《Shock Wave Boundary Layer Interaction》.pdf:PDF},
}

@Book{Blazek2015,
  author  = {Jri Blazek},
  title   = {Computational Fluid Dynamics (Principles and Applications)},
  year    = {2015},
  comment = {9.6 Parallelization

​	计算流体力学可应用多种编程范式进行并行，包括MPI（编程层面上），OpenMP, CUDA, OpenCL, PoenACC 以及微软2012年推出的 C++AMP 等（函数、循环层面上）。可以结合 MPI 与其他任意语言做到最大加速。以用 Jacobi 迭代求解 2 维固定边界的 Laplace 方程为例演示四种编程范式。计算了残差的2范数表示规约操作。

​	MPI是最经典的并行数值计算编程模型，其基本思路是将计算域按CPU核数量分块，并行地计算流场解。由于每个分区（partition）中的流场计算都依赖于其他分区的值，而每个分区都有其自己的专用内存，故实现处理器间的数据交换十分重要。MPI提供进程间通信的显式控制。信息（流场变量、几何数据、残差等）在各分区可用（MPI_Send，MPI_Isend）发出，用（MPI_Recv）接收。可实现一个处理器向所有处理器的收集（`MPI_Allreduce`，如残差范数、力、力矩），一个分区向所有分区的广播（MPI_Bcast 或 MPI_Scatter）。另一个重要功能为进程的同步（MPI_Barrier）。

​	几个细节问题：（1）负载平衡：将网格分区，使得各处理器计算量基本一致。对于结构网格，计算量与控制体（网格/节点）数量呈正比，按其最大数量节点/网格方向分块可以使交界边/面的数据交流最少。对于非结构网格，一个分区内的计算量取决于边的数量（对于 median-dual 格式）或胞元面的数量（对于 cell-centered 格式）。对于空间精度 >2 的格式，计算量还取决于相邻单元的数量。Metis 库很适合非结构网格，它能提供一些优化负载平衡的选项，使并行快速、可靠。（2）哪些地方需要数据交流：至少公共边界需要，结构网格、多重网格的逻辑自然而然，非结构网格需要适合的程序设计。MPI 没有提供寻找相关分区的函数，编程者需自行提供必要的逻辑关系。（3）高阶空间离散、需要计算流场梯度和限制器函数的 N-S 方程求解、隐式时间离散格式都需要相邻区域的数据通信。PETSc 库是流场求解器常用的并行库，提供一系列并行线性、非线性方程求解和时间积分功能。

​	OpenMP提供共享内存并行编程，将计算任务分为多线程，各线程共享应用内存，并行执行。

​	CUDA利用GPU的并行计算单元，GPU的并行吞吐量体系结构可以相对缓慢并行地执行多个线程，而不是像 CPU 那样快速地执行单个线程。这可以大幅增加并行速度。

​	OpenCL定义了一个应用程序编程接口(API)，它允许在主机上执行的程序在计算设备上启动内核并管理设备内存。设备可能与主机CPU共享内存，也可能不共享内存。API 在设备内存缓冲区上提供句柄和函数，用于在主机和计算设备之间来回传输数据。

reduction 规约/收取+操作

scatter 分发

gather 收集

collective聚合操作

11 Principles of Grid Generation

​	在数值求解控制方程前，需要对边界面进行离散化，对流场域内进行网格划分，通常分为结构网格和非结构网格两种。结构网格和非结构网格有各自的优缺点。六面体结构网格最大的优点是能够保证沿壁面法向的精度，对于高度拉伸的粘性网格除去网格类型。同时与四面体网格相比，可以减少单元、边、面的数量。非结构网格的优点是能更快更好地划分复杂边界网格，同时可以减少人为介入，更加自动化。保存几何尺寸的CAD文件中的数据质量也是制约网格质量的因素。直接三角划分表面网格的STL格式对精度有一定的改善。

​	结构网格最大的特点是物理空间中的网格点与三维整数序列网格点之间，以一种独特的关系一一对应，这种对应关系使得相邻连接可以在计算空间和物理空间形成六面体（2维为四边形）。结构网格生成有两种常用的方法：代数网格生成和偏微分方程网格生成。代数网格生成通常采用超限插值，偏微分方程网格生成通常采用椭圆方程和双曲方程求解。

​	非结构网格的节点、单元都是准随机排列的，即邻近网格的节点编号不能直接通过该节点编号计算。这使得非结构网格有极大的灵活性，可以自由地细化和粗化局部网格。非结构网格的生成通常有Delaunay三角划分和前沿推进（advancing-front）两种方法，以及两者结合的前沿推进三角划分法。此外还有气泡堆积（bubble packing）算法。

​	Delaunay三角划分和Voronoj多边形是对偶关系，Voronoj多边形的节点是三角形的外接圆，即每个三角形的外接圆内不包含其他点。Delaunay三角划分是一种将网格点连接的算法，通常向初始三角划分中插入序列点，再进行Delauney网格的构建。这种增加插入点策略步骤如下所示：

1. 离散物理边界
2. 生成初始Delauney网格
3. 用Delaunay符合技术将所有边界点插入到初始三角划分中
4. 列出所有的坏单元（不满足尺寸、质量条件），从最差的单元开始
5. 在外接圆圆心放置一个新的点，局部重新三角划分网格，检查每个新单元，将不符合尺寸、质量要求的加入列表中
6. 若列表中仍有单元，回到第5步
7. 删去域外单元，重构边界(该步骤也可以在第3步后进行)
8. 检查网格质量，光滑网格边界

该方法的核心在于第3步和第5步中插入节点，Green和Svson、Bowyer、Watson等人提出了许多种算法。Watson的算法步骤如下：

1. 定位插入点的单元
2. 找到所有其外接圆包含插入点的单元
3. 删除插入点所在单元的三角形
4. 连接插入点与凸多边形的顶点形成新三角形单元

Watson算法的适用的数据结构如下：生成节点的下标、相邻单元的指针、外接圆圆心和半径。

​	前沿推进法的步骤如下：

1. 生成边界网格
2. 生成一个列表存储代表前沿的边（3维的面），初始为边界边（面），按边（面）的尺寸升序排列。
3. 在列表中的第一个边（面）中心的法线上放置一个点P0，该点到边（面）的距离由尺寸分布函数决定。
4. 以P0为圆心定义一个半径为r的圆（球）
5. 找到圆（球）中包含的所有点
6. 如果不包含点，则用边界与P0生成一个新的单元，否则按与P0距离的升序编号圆内的点，生成新的单元。得到第一个不包含任何其他单元并满足给定质量要求的点。
7. 删除列表中原有的前沿，加入新生成的前沿，重新排序
8. 回到第3步至列表清空。
9. 检查网格质量，光滑网格边界



​	网格质量严重影响计算精度，尤其对非结构网格。网格越规则越好，尺寸变化越光滑越好，网格质量要足够好以满足几何、流场特性。对于四面体网格应该避免以下特性：钝角Obtuse单元、碎屑sliver单元、针状needle单元、楔形wedge单元。除了单元内角，还有以下常用的质量估计指标：

- 外接圆半径/内切圆半径
- 最大边长/内切圆半径
- 外接圆半径/最大边长
- 最大边长/最小边长
- （平均单元边长）^3 / 体积
- 体积^4  / 表面积^3

Lawson的边扫描法可用来改善网格质量，尤其适合去除sliver单元。

​	光滑网格的方法可以改善网格质量。用近似拉普拉斯算子移动网格点，其关系式迭代求解。Gauss - Seidel 格式比 Jacobi 格式在负体积的抑制上表现地更好。},
  file    = {:Blazek 2015《Computational Fluid Dynamics (Principles and Applications)》.pdf:PDF},
}

@InCollection{Zhang2016,
  author    = {Y.-T. Zhang and C.-W. Shu},
  booktitle = {Handbook of Numerical Analysis},
  publisher = {Elsevier},
  title     = {{ENO} and {WENO} Schemes},
  year      = {2016},
  pages     = {103--122},
  doi       = {10.1016/bs.hna.2016.09.009},
}

@Book{PVC,
  author = {PVC},
  title  = {miniWikiBook},
  file   = {:PVC 《MiniWikiBook》.pdf:PDF},
}

@Book{,
  title = {The Finite Volume Method in Computatinal Fluid Dynamics},
  year  = {2016},
  doi   = {10.1007/978-3-319-16874-6},
  file  = {:2016《The Finite Volume Method in Computatinal Fluid Dynamics》.pdf:PDF},
}

@Article{郑建靖2016,
  author = {郑建靖},
  title  = {面向并行计算流体动力学模拟的非结构网格的若干问题研究},
  year   = {2016},
  file   = {:郑建靖 2016《面向并行计算流体动力学模拟的非结构网格的若干问题研究》.pdf:PDF},
}

@Article{张晓媛2016,
  author  = {张晓媛 and 张珩 and 翟健},
  journal = {计算机系统应用},
  title   = {基于邻域的大规模图数据动态分割算法},
  year    = {2016},
  file    = {:张晓媛 2016《基于邻域的大规模图数据动态分割算法》.pdf:PDF},
}

@Article{Karypis1998,
  author    = {George Karypis and Vipin Kumar},
  journal   = {Journal of Parallel and Distributed Computing},
  title     = {Multilevelk-way Partitioning Scheme for Irregular Graphs},
  year      = {1998},
  month     = {jan},
  number    = {1},
  pages     = {96--129},
  volume    = {48},
  comment   = {​	METIS 系列多级划分算法是目前公认效率较高、效果较好的划分非结构图、有限元单元、超图的工具，由明尼苏达大学的 Karypis 教授团队开发。其下包含 METIS 串行图划分与矩阵分块包，ParMETIS 并行图分块与矩阵分块包和 hMETIS 超图分块包。METIS 包中的算法基于 Karypis 团队开发的的“多级递归二分法 (multilevel recursive-bisection)”、”多级 k 层法 (multilevel k-way)”和“多约束分块法（multi-constraint partitioning  schemes）”。METIS 分块包有以下特点：分块质量高，比谱分块方法的分块质量提高 10% 到 50%；分块速度快，比其他常用的分块算法快 1 到 2 个数量级；分块产生带宽缩减矩阵排序，对稀疏矩阵分解的存储和计算量的需求与“多重最小度（multiple minimum degree）”相比减少 1 个数量级，其生成的消去树适用于直接并行分解。ParMETIS为基于 MPI 的并行分块版本，其算法为 METIS 中对应的并行版本。hMETIS 用于对如超大规模集成电路的超图进行分块，其算法基于“多级超图分块法（multilevel hypergraph partitioning schemes）”，其优点为生成的分块质量非常高。参考[Graph Partitioning](http://glaros.dtc.umn.edu/gkhome/project/gp/overview)

​	METIS 的多级 k 层分区算法主要包含三个阶段，图的粗化阶段、初始分区阶段和反粗化阶段。其中包含的主要算法有网格粗化算法 、多级二分算法和 Kernighan-Lin 算法。另外还有理论上较好的谱分区算法。

​	网格粗化算法的主要思想为将图的节点逐步聚团，从而形成更少节点的大粒度图。其具体做法如下：对每个节点与边赋予权重；将节点组合为一个整体，形成一个大粒度节点；为保证粗化图的连通关系，大粒度节点的边为各子节点的边的并集；为保证粗化图与原图的一致性，各大粒度节点上的权重为各子节点权重之和，各合并边的权重为各边权重之和。为了确定哪些点需要聚团，定义了匹配度的概念，常用的匹配度有“随机匹配 (Random Matching)”、“权重边匹配 (Heavy Edge Matching)”、“修正权重边匹配 (Modified Heavy Edge Matching)”。

​	Kernighan-Lin算法本质上时一种启发式的贪婪算法，其主要思想是以减小交界长度为目标，在二分的两个区间之间逐步交换顶点，直至达到局部最优。一种常用的 KL 算法的变体为 Fiduccia 和 Mattheyses 改进的 FM 算法，其主要思想为以减少交界长度为目的，变化地计算每个顶点的权重，在逐步交换顶点时只交换权重最大的顶点，从而降低复杂度。

​	谱分块算法的步骤为：(1) 创建图 G 的拉普拉斯矩阵 $L(G) = C_{T}C$；(2) 计算第二小的特征值及其对应的特征向量；(3) 用特征向量中每个值的符号确定图的划分，正号为源点，负号为目标点。},
  doi       = {10.1006/jpdc.1997.1404},
  file      = {:Karypis 1998《Multilevelk Way Partitioning Scheme for Irregular Graphs》.pdf:PDF},
  publisher = {Elsevier {BV}},
}

@InProceedings{McSherry2001,
  author    = {F. McSherry},
  booktitle = {Proceedings 42nd {IEEE} Symposium on Foundations of Computer Science},
  title     = {Spectral partitioning of random graphs},
  year      = {2001},
  publisher = {{IEEE}},
  doi       = {10.1109/sfcs.2001.959929},
  file      = {:McSherry 2001《Spectral Partitioning of Random Graphs》.pdf:PDF},
}

@Article{Barnard1994,
  author    = {Stephen T. Barnard and Horst D. Simon},
  journal   = {Concurrency: Practice and Experience},
  title     = {Fast multilevel implementation of recursive spectral bisection for partitioning unstructured problems},
  year      = {1994},
  month     = {apr},
  number    = {2},
  pages     = {101--117},
  volume    = {6},
  doi       = {10.1002/cpe.4330060203},
  file      = {:Barnard 1994《Fast Multilevel Implementation of Recursive Spectral Bisection for Partitioning Unstructured Problems》.pdf:PDF},
  publisher = {Wiley},
}

@Comment{jabref-meta: databaseType:bibtex;}
